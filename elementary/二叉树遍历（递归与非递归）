package isoft.sort.nuke_test7_1;

import java.util.Stack;

public class erchashu {

	public static void preOrderRecur(Node head){
		if(head == null){
			return;
		}
		System.out.println(head.value+"  ");
		preOrderRecur(head.left);
		preOrderRecur(head.right);
	}
	
	public static void inOrderRecur(Node head){
		if(head == null){
			return;
		}
		inOrderRecur(head.left);
		System.out.println(head.value+"  ");
		inOrderRecur(head.right);
	}
	public static void posOrderRecur(Node head){
		if(head == null){
			return;
		}
		posOrderRecur(head.left);
		posOrderRecur(head.right);
		System.out.println(head.value+"  ");
	}
	
	//--------------------二叉树非递归------------------------------
	public static void preOrderUnRecursion(Node head){
		if(head != null){
			Stack<Node> stack = new Stack<Node>();
			stack.push(head);
			while(!stack.isEmpty() ){
				head = stack.pop();
				System.out.print(head.value+" ");
				if(head.right != null){
					stack.push(head.right);
				}
				if(head.left != null){
					stack.push(head.left);
				}
			}
		}
	}
	
	public static void inOrderUnRecur(Node head){
		if(head != null){
			Stack<Node> stack = new Stack<Node>();
			while(!stack.isEmpty() || head != null){
				if(head != null){
					stack.push(head);
					head = head.left;
				}else{
					head = stack.pop();
					System.out.print(head.value+" ");
					head = head.right;
				}
				
			}
		}
	}
	
	public static void posOrderUnRecur(Node head){
		if(head != null){
			Stack<Node> stack1 = new Stack<Node>();
			Stack<Node> stack2 = new Stack<Node>();
			stack1.push(head);
			while(!stack1.isEmpty()){
				head = stack1.pop();
				stack2.push(head);
				if(head != null){
					if(head.left != null){
						stack1.push(head.left);
					}
					if(head.right != null){
						stack1.push(head.right);
					}
				}
			}
			while(!stack2.isEmpty()){
				System.out.println(stack2.pop().value+" ");
			}
		}
	}

}
